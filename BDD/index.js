const { Neo4jGraphQL } = require("@neo4j/graphql");
const { OGM } = require("@neo4j/graphql-ogm");
const { ApolloServer } = require("apollo-server");
const neo4j = require("neo4j-driver");
const fs = require("fs");
const dotenv = require("dotenv");
const path = require("path");
var nJwt = require("njwt");

// Load contents of .env as environment variables
dotenv.config();

// Load GraphQL type definitions from schema.graphql file
const typeDefs = fs
  .readFileSync(path.join(__dirname, "todo.graphql"))
  .toString("utf-8");

// Create Neo4j driver instance
const driver = neo4j.driver(
  process.env.NEO4J_URI,
  neo4j.auth.basic(process.env.NEO4J_USER, process.env.NEO4J_PASSWORD)
);

const ogm = new OGM({ typeDefs, driver });
const ProjectChef = ogm.model("ProjectChef");
const Manager = ogm.model("Manager");

const resolvers = {
    Mutation: {
        signUpProjectChef: async (_source, { username, password, conect }) => {
            const [existing] = await ProjectChef.find({
                where: {
                    username,
                },
            });

            if (existing) {
                throw new Error(`User with username ${username} already exists!`);
            }

            const[mg] = await Manager.find({
                where: {
                    username: conect
                },
            });

	    if (!mg) {
                throw new Error(`Manager with username ${conect} doesn't exist!`);
            }

            const user = await ProjectChef.create({
                input: [
                    {
                        username,
                        password,
			manager: {
			    connect: {
				where: {
				    node: {
					username: mg.username
				    }
				}
			    }
			}
                    }
                ]
            });

            return nJwt.create({ sub: user.projectChefs[0].id }, signingKey).setExpiration().compact();
        },
	signUpManager: async (_source, { username, password }) => {
            const [existing] = await Manager.find({
                where: {
                    username,
                },
            });

            if (existing) {
                throw new Error(`User with username ${username} already exists!`);
            }

            const user = await Manager.create({
                input: [
                    {
                        username,
                        password
                    }
                ]
            });

            return nJwt.create({ sub: user.managers[0].id }, signingKey).setExpiration().compact();
        },
        signIn: async (_source, { username, password }) => {
            const [user] = await ProjectChef.find({
                where: {
                    username,
                },
            });

            if (!user) {
	    	const [manager] = await Manager.find({
        	    where: {
                        username,
                    },
            	});

		if (!manager) {
                    throw new Error(`No user with username ${username} not found!`);
		    }

                const correctPassword = password == manager.password;

		if (!correctPassword) {
		    throw new Error(`Incorrect password for manager with username ${username}!`);
            	}

            	return nJwt.create({ sub: manager.id, status:"Manager" }, signingKey).setExpiration().compact();

	    }

            const correctPassword = password == user.password;

            if (!correctPassword) {
		throw new Error(`Incorrect password for user with username ${username}!`);
            }

            return nJwt.create({ sub: user.id, status: "ProjectChef" }, signingKey).setExpiration().compact();
        },
    },
};

// Create executable GraphQL schema from GraphQL type definitions,
// using @neo4j/graphql to autogenerate resolvers
const neoSchema = new Neo4jGraphQL({
    typeDefs,
    resolvers,
    config: {
	jwt: {
	    secret: "dFt8QaYykR6PauvxcyKVXKauxvQuWQTc"
	}
    }
});
var signingKey = "dFt8QaYykR6PauvxcyKVXKauxvQuWQTc";

// Create ApolloServer instance that will serve GraphQL schema created above
// Inject Neo4j driver instance into the context object, which will be passed
//  into each (autogenerated) resolver
const server = new ApolloServer({
  context:({req}) => ({ driver, req }),
  schema: neoSchema.schema,
  //introspection: true,
//  playground: false
});

// Start ApolloServer
server.listen().then(({ url }) => {
  console.log(`GraphQL server ready at ${url}`);
});
